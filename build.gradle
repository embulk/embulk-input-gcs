plugins {
    id "com.github.johnrengelman.shadow" version "4.0.3"
    id "java"
    id "checkstyle"
    id "jacoco"
    id "signing"
    id "maven-publish"
    id "org.embulk.embulk-plugins" version "0.4.2"
}

repositories {
    mavenCentral()
    jcenter()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = "org.embulk"
version = "0.3.4"
description = "Reads files stored on Google Cloud Storage."

// Relocate Guava packages since it's incompatible with Guava's version from Embulk
shadowJar {
    classifier = "shadow"
    exclude "org/embulk/plugin/**"

    dependencies {
        include dependency("com.google.guava:guava")
        include dependency("com.google.cloud:google-cloud-storage")
    }

    relocate "com.google.common", "embulk.gcs.com.google.common"
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
    options.encoding = "UTF-8"
}

java {
    withJavadocJar()
    withSourcesJar()
}

def embulkVersion = '0.10.31'

dependencies {
    compileOnly "org.embulk:embulk-api:$embulkVersion"
    compileOnly "org.embulk:embulk-spi:$embulkVersion"

    compile('org.embulk:embulk-util-config:0.3.1') {
        // Conflict with Embulk Core
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-annotations'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-core'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
        exclude group: 'com.fasterxml.jackson.datatype', module: 'jackson-datatype-jdk8'
        exclude group: 'javax.validation', module: 'validation-api'
    }
    compile 'com.fasterxml.jackson.core:jackson-core:2.6.7'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.6.7'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.6.7'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.6.7'
    compile 'javax.validation:validation-api:1.1.0.Final'

    compile "org.embulk:embulk-util-file:0.1.3"
    compile('org.embulk:embulk-util-retryhelper:0.8.1') {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }

    compile "com.google.cloud:google-cloud-storage:1.56.0"

    testCompile "junit:junit:4.12"
    testCompile "org.embulk:embulk-core:$embulkVersion"
    testCompile "org.embulk:embulk-core:$embulkVersion:tests"
    testCompile "org.embulk:embulk-deps:$embulkVersion"
    testCompile "org.embulk:embulk-junit4:$embulkVersion"
    testCompile "org.mockito:mockito-core:2.18.3"
    testCompile 'com.google.code.findbugs:annotations:3.0.0'
    testCompile "org.embulk:embulk-formatter-csv:0.10.36"
    testCompile "org.embulk:embulk-output-file:0.10.36"
    testCompile "org.embulk:embulk-parser-csv:0.10.36"
}

embulkPlugin {
    mainClass = "org.embulk.input.gcs.GcsFileInputPlugin"
    category = "input"
    type = "gcs"
}

javadoc {
    options {
        locale = 'en_US'
        encoding = 'UTF-8'
    }
}

jar {
    from rootProject.file("LICENSE.txt")
}

sourcesJar {
    from rootProject.file("LICENSE.txt")
}

javadocJar {
    from rootProject.file("LICENSE.txt")
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = project.name

            from components.java

            pom {  // https://central.sonatype.org/pages/requirements.html
                packaging "jar"

                name = project.name
                description = project.description
                url = "https://www.embulk.org/"

                developers {
                    developer {
                        name = "Satoshi Akama"
                        email = "satoshiakama@gmail.com"
                    }
                    developer {
                        name = "John Luong"
                        email = "jluong@treasure-data.com"
                    }
                }

                licenses {
                    license {
                        // http://central.sonatype.org/pages/requirements.html#license-information
                        name = "MIT License"
                        url = "http://www.opensource.org/licenses/mit-license.php"
                    }
                }

                scm {
                    connection = "scm:git:git://github.com/embulk/embulk-output-gcs.git"
                    developerConnection = "scm:git:git@github.com:embulk/embulk-output-gcs.git"
                    url = "https://github.com/embulk/embulk-output-gcs"
                }
            }
        }
    }

    repositories {
        maven {  // publishMavenPublicationToMavenCentralRepository
            name = "mavenCentral"
            if (project.version.endsWith("-SNAPSHOT")) {
                url "https://oss.sonatype.org/content/repositories/snapshots"
            } else {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            }

            credentials {
                username = project.hasProperty("ossrhUsername") ? ossrhUsername : ""
                password = project.hasProperty("ossrhPassword") ? ossrhPassword : ""
            }
        }
    }
}

signing {
    sign publishing.publications.maven
}

gem {
    authors = [ "Satoshi Akama" ]
    email = [ "satoshiakama@gmail.com" ]
    summary = "Google Cloud Storage input plugin for Embulk"
    homepage = "https://github.com/embulk/embulk-input-gcs"
    licenses = [ "MIT" ]
}

gemPush {
    host = "https://rubygems.org"
}

task classpath(type: Copy, dependsOn: ["jar", "shadowJar"]) {
    doFirst { file("classpath").deleteDir() }
    from (configurations.runtime
            + configurations.shadow
            - files(shadowJar.getIncludedDependencies())
            + files(shadowJar.archivePath))
    into "classpath"
}

test {
    jvmArgs '-XX:MaxPermSize=128M', '-Xmx2048m'
    testLogging {
        events "passed", "skipped", "failed"
    }
}

checkstyle {
    configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    toolVersion = '6.14.1'
}
checkstyleMain {
    configFile = file("${project.rootDir}/config/checkstyle/default.xml")
    ignoreFailures = false
}
checkstyleTest {
    configFile = file("${project.rootDir}/config/checkstyle/default.xml")
    ignoreFailures = false
}
task checkstyle(type: Checkstyle) {
    classpath = sourceSets.main.output + sourceSets.test.output
    source = sourceSets.main.allJava + sourceSets.test.allJava
}
