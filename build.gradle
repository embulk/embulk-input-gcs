plugins {
    id "java"
    id "maven-publish"
    id "signing"
    alias(libs.plugins.gradle.embulk.plugins)
    id "checkstyle"
}

repositories {
    mavenCentral()
}

group = "org.embulk"
version = "0.5.0-SNAPSHOT"
description = "Reads files stored on Google Cloud Storage."

configurations {
    compileClasspath.resolutionStrategy.activateDependencyLocking()
    runtimeClasspath.resolutionStrategy.activateDependencyLocking()
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
    options.encoding = "UTF-8"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }

    withJavadocJar()
    withSourcesJar()
}

dependencies {
    compileOnly libs.embulk.spi
    compileOnly libs.slf4j

    implementation(libs.embulk.util.config) {
        // Conflict with Embulk Core
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-annotations'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-core'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
        exclude group: 'com.fasterxml.jackson.datatype', module: 'jackson-datatype-jdk8'
        exclude group: 'javax.validation', module: 'validation-api'
    }

    // embulk-input-gcs:0.3.2 and earlier have been working with containing jackson-core:2.9.6 (no other Jackson sublibrarires)
    // while embulk-core has had jackson-core/annotations/databind 2.6.7. Safer to have the combat-tested version as of now.
    //
    // It (and other Jackson sublibraries) will be replaced with the latest Jackson after Embulk v0.10.32 and later get popular.
    implementation libs.jackson.core

    implementation libs.jackson.annotations
    implementation libs.jackson.databind
    implementation libs.jackson.datatype.jdk8
    implementation libs.validation

    implementation libs.embulk.util.file
    implementation(libs.embulk.util.retryhelper) {
        exclude group: "org.slf4j", module: "slf4j-api"
    }

    implementation(libs.google.cloud.storage) {
        exclude group: "commons-logging", module: "commons-logging"
    }

    // Instead of "commons-logging:commons-logging:1.2" that is required from "google-cloud-storage",
    // we use "jcl-over-slf4j" because Embulk is based on SLF4J.
    implementation(libs.jcl.over.slf4j) {
        // slf4j-api is in embulk-core / embulk-api.
        exclude group: "org.slf4j", module: "slf4j-api"
    }

    testImplementation libs.junit4
    testImplementation libs.embulk.core
    testImplementation libs.embulk.deps
    testImplementation libs.embulk.junit4
    testImplementation libs.mockito.core
    testImplementation libs.embulk.formatter.csv
    testImplementation libs.embulk.output.file
    testImplementation libs.embulk.parser.csv
}

embulkPlugin {
    mainClass = "org.embulk.input.gcs.GcsFileInputPlugin"
    category = "input"
    type = "gcs"
}

javadoc {
    options {
        locale = 'en_US'
        encoding = 'UTF-8'
    }
}

jar {
    metaInf {
        from rootProject.file("LICENSE")
    }
}

sourcesJar {
    metaInf {
        from rootProject.file("LICENSE")
    }
}

javadocJar {
    metaInf {
        from rootProject.file("LICENSE")
    }
}

// It should not publish a `.module` file in Maven Central.
// https://docs.gradle.org/current/userguide/publishing_gradle_module_metadata.html#sub:disabling-gmm-publication
tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

// A safer and strict alternative to: "dependencies" (and "dependencies --write-locks")
//
// This task fails explicitly when the specified dependency is not available.
// In contrast, "dependencies (--write-locks)" does not fail even when a part the dependencies are unavailable.
//
// https://docs.gradle.org/8.7/userguide/dependency_locking.html#generating_and_updating_dependency_locks
task checkDependencies {
    notCompatibleWithConfigurationCache("The task \"checkDependencies\" filters configurations at execution time.")
    doLast {
        configurations.findAll { it.canBeResolved }.each { it.resolve() }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = project.name

            from components.java
            // javadocJar and sourcesJar are added by java.withJavadocJar() and java.withSourcesJar() above.
            // See: https://docs.gradle.org/current/javadoc/org/gradle/api/plugins/JavaPluginExtension.html

            pom {  // https://central.sonatype.org/pages/requirements.html
                packaging "jar"

                name = project.name
                description = project.description
                url = "https://www.embulk.org/"

                developers {
                    developer {
                        name = "Satoshi Akama"
                        email = "satoshiakama@gmail.com"
                    }
                    developer {
                        name = "Muga Nishizawa"
                        email = "muga.nishizawa@gmail.com"
                    }
                    developer {
                        name = "Naotoshi Seo"
                        email = "sonots@gmail.com"
                    }
                    developer {
                        name = "Robert Nguyen"
                        email = "ng.hung83@gmail.com"
                    }
                    developer {
                        name = "Hieu Duong"
                        email = "duongminhhieu89@gmail.com"
                    }
                    developer {
                        name = "John Luong"
                        email = "jluong@treasure-data.com"
                    }
                    developer {
                        name = "Dai MIKURUBE"
                        email = "dmikurube@treasure-data.com"
                    }
                }

                licenses {
                    license {
                        // http://central.sonatype.org/pages/requirements.html#license-information
                        name = "The Apache License, Version 2.0"
                        url = "https://www.apache.org/licenses/LICENSE-2.0.txt"
                        distribution = "repo"
                    }
                }

                scm {
                    connection = "scm:git:git://github.com/embulk/embulk-input-gcs.git"
                    developerConnection = "scm:git:git@github.com:embulk/embulk-input-gcs.git"
                    url = "https://github.com/embulk/embulk-input-gcs"
                }
            }
        }
    }

    repositories {
        maven {  // publishMavenPublicationToMavenCentralRepository
            name = "mavenCentral"
            if (project.version.endsWith("-SNAPSHOT")) {
                url "https://oss.sonatype.org/content/repositories/snapshots"
            } else {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            }

            credentials {
                username = project.hasProperty("ossrhUsername") ? ossrhUsername : ""
                password = project.hasProperty("ossrhPassword") ? ossrhPassword : ""
            }
        }
    }
}

signing {
    if (project.hasProperty("signingKey") && project.hasProperty("signingPassword")) {
        logger.lifecycle("Signing with an in-memory key.")
        useInMemoryPgpKeys(signingKey, signingPassword)
    }
    sign publishing.publications.maven
}

gem {
    authors = [ "Satoshi Akama" ]
    email = [ "satoshiakama@gmail.com" ]
    summary = "Google Cloud Storage input plugin for Embulk"
    homepage = "https://github.com/embulk/embulk-input-gcs"
    licenses = [ "Apache-2.0" ]
    from rootProject.file("LICENSE")
    from rootProject.file("NOTICE-gem")
    rename ("NOTICE-gem", "NOTICE")

    // The contents of "shadow-google-cloud-storage-*.jar" should have already been mixed in "embulk-input-gcs-*.jar".
    exclude { it.file.name.contains "shadow-google-cloud-storage" }
}

gemPush {
    host = "https://rubygems.org"
}

test {
    jvmArgs "-XX:MaxPermSize=128M", "-Xmx2048m"
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
        showCauses = true
        showExceptions = true
        showStackTraces = true
        showStandardStreams = true
        outputs.upToDateWhen { false }
    }
}

tasks.withType(Checkstyle) {
    reports {
        // Not to skip up-to-date checkstyles.
        outputs.upToDateWhen { false }
    }
}

checkstyle {
    toolVersion = libs.versions.checkstyle.get()
    configFile = file("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
    configProperties = [
        "org.checkstyle.google.suppressionfilter.config": file("${rootProject.projectDir}/config/checkstyle/checkstyle-suppressions.xml"),
    ]
    ignoreFailures = false
    maxWarnings = 0
}
